import streamlit as st
import requests
import re
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


checkdaylivebadge=""
def main():
    Navigation(page())


def page():
    st.set_page_config(page_title="Green Grid", page_icon="🌱",layout="wide")
    
    
    #st.sidebar.image("/home/muneer/Desktop/PY4E/208080282/project/3d-abstract-science-background-with-flowing-particles.jpg", width=340)
    Nav=st.sidebar.radio("Navigation", ["🏠 Home","ℹ️ About"])#🌞 Live Solar & Wind Share", "💰 Live Prices", "ℹ️ About"])
    
    st.sidebar.subheader("_Developed by Muneer Alsughayer_")
    st.sidebar.subheader(":grey[Utilizing Frauenhafer ISE Energy-Charts API Public Power Database]")
    st.sidebar.markdown(":grey[_Graphs generated by Green Grid are licensed under_ [CC by 4.0](https://creativecommons.org/licenses/by/4.0/). _Proper attribution required_]")
    
    
    
    

    
        

    return Nav
    

def Navigation(page):
    if page =="🏠 Home":
         page_Home()
    elif page =="🌞 Live Solar & Wind Share":
        page_Live()
    elif page =="💰 Live Prices":
        page_Price()
    elif page == "ℹ️ About":
        page_About()
    else:
        page_Home()


def Regex_country(country):
    url2="https://api.energy-charts.info/public_power?country=<code>&start=<timestamp1>&end=<timestamp2>"
    if country=="Germany":
        return (re.sub(r'<code>','de',url2))
    elif country== "Switzerland":
        return (re.sub(r'<code>','ch',url2))
      
    
def Regex_date( url,timestamp1,timestamp2):
    timestamp1= str(timestamp1)
    timestamp2= str(timestamp2)
    v1=re.sub(r'<timestamp1>',timestamp1,url)
    v2=re.sub(r'<timestamp2>',timestamp2,v1)
    return v2

def page_Home():

    col= []
    col= st.columns(4,gap='small',vertical_alignment='top')   
    col[0].title(":green[Green Grid] Germany") 
    col[0].subheader(":grey[_Live Energy Insights At Your Fingertips_]", divider='green')
    st.sidebar.markdown("💡Any :orange[ideas?] Connect with me ")
    st.sidebar.link_button(':blue[LinkedIn]','https://www.linkedin.com/in/muneeras/') 
    st.sidebar.link_button('Email', 'Muneer.as@outlook.com')
    col[1].image("/home/muneer/Desktop/PY4E/208080282/project/wind-7595553_640.png", width=275)
    col[3].subheader("_A flexible tool generating german public power graphs at your fingertips with maximum flexibility._")
    
    col1, col2= st.columns(2)
    #country1= col1.selectbox('Select By Country',["Germany", "Switzerland"])
    today=str(datetime.date(datetime.now()))
    Filter= col1.multiselect('Filter',["Total Net Renewable Power🌊☀️💨🌱🌋","🌊Total Net Hydro Power","Hydro pumped storage consumption","Hydro Run-of-River","Hydro water reservoir","Hydro pumped storage"
                                       , "💨Total Wind Power","Wind offshore","Wind onshore","☀️Total Solar Power","🌱Total Biogenic","Biomass", "Waste", "🌋Geothermal","Nuclear" ,"Cross border electricity trading","Total Non-Renewable Net Power", "Total Non-Renewable Net Power(Import/Export Excluded)"
                                       ,"Fossil brown coal / lignite","Fossil hard coal","Fossil oil","Fossil gas","Fossil coal-derived gas", "Others" ],
                                       help= "Total's include all respective power production types (e.g,🌊Total Net Hydro Power= Hydro pumped storage consumption + Hydro Run-of-River + Hydro water reservoir + Hydro pumped storage")
    
    
    
    # try and except for date range
    try:
        timestamp1, timestamp2= col2.date_input("Select Date Range",value=[today,today],min_value="2022-01-01", max_value=(today), help= "Range of the same day selects that 24 hours(e.g, 2025/06/25-2025/06/25)")
        ccol=col2.columns(2,gap='small')
        try:
            
                #Date Range Selecter
                
                

                
                #When date select Equals Today Live Badge Displayed
                #global checkdaylivebadge 
                #checkdaylivebadge = timestamp2 
                #if checkdaylivebadge == datetime.date(datetime.now()):
                
                test= requests.get("https://api.energy-charts.info/")
                ccol[0].badge("Live", color="green")
                ccol[1].badge("Updates Every 15 mins @ (HH-15, HH-30, HH-45 and HH-60)", color="green")
                        
            
                       
                          
                        
                

                if Filter: 
                    #Fetching url and Substituing date selected in Range
                    url1=Regex_country("Germany")
                    url2=Regex_date(url1,timestamp1, timestamp2)
                    
                    response= (requests.get(url2)).json()
                    normalized_response= pd.json_normalize(response, record_path='production_types', meta='unix_seconds')
                    df= pd.DataFrame(normalized_response)

                    #Changing time from unix_sec to date
                    
                    time2=[]
                    
                    
                    for i in df['unix_seconds']:     
                        time1=[]
                        for x in range(len(df['unix_seconds'][0])):
                            time1.append(datetime.fromtimestamp(i[x]))
                            
                        time2.append(time1)
                        
                    df['time']=time2
                    for i in range(len(df['name'])):
                            
                            df['data'][i]=(df['data'][i])[0::12]
                            df['time'][i]=(df['time'][i])[0::12]
                            df['unix_seconds'][i]=(df['unix_seconds'][i])[0::12]
                    

                    #constant that doesnt change
                    timedf=df['time'][0]
                    timedflen=len(timedf)
                    timedflen_range=range(timedflen)
                    #listtime_df_len=list(range(timedflen))
                    
                    
                    
                # ,"Load","Residual load","Renewable share of load","Renewable share of generation"]

                    Total_Power=["Hydro pumped storage consumption","Cross border electricity trading","Hydro Run-of-River","Biomass","Fossil brown coal / lignite",
                                    "Fossil hard coal","Fossil oil","Fossil coal-derived gas","Fossil gas","Geothermal","Hydro water reservoir","Hydro pumped storage",
                                    "Others","Waste","Wind offshore","Wind onshore","Solar"]
                    
                    

                    Renewable_Array=["Wind offshore","Wind onshore","Hydro pumped storage consumption","Solar","Hydro Run-of-River","Hydro water reservoir","Hydro pumped storage",
                                    "Biomass","Waste","Geothermal"]
                    
                    Wind_Array=["Wind offshore","Wind onshore"]

                    Hydro_Array=["Hydro pumped storage consumption","Hydro Run-of-River","Hydro water reservoir","Hydro pumped storage"]

                    Biogenic_Array=["Biomass","Waste"]

                    #Geothermal_Key

                    #Nuclear_Key

                    #Others_Key

                    #Cross border electricity trading

                    Non_Renewable_Array_Inc_C=[ "Cross border electricity trading","Fossil brown coal / lignite",
                                    "Fossil hard coal","Fossil oil","Fossil coal-derived gas","Fossil gas","Others","Nuclear"]
                    
                    Non_Renewable_Array_Disc=["Fossil brown coal / lignite",
                                    "Fossil hard coal","Fossil oil","Fossil coal-derived gas","Fossil gas","Others"]

                    
                    IndexList= [*df['name']]
                    
                    
                    Stack_append=[]
                    Stack_label=[]
                    Stack_colors=[]
                    
                    #Remove Null Values and put them as Zeros
                    #print(df)
                    #df2=(df['data'][0])[0::4]
                    #print(df2)
                    for i in range(len(df['name'])):
                        for j in range(timedflen):
                            if df['data'][i][j]== None:
                                df['data'][i][j]=0
                            


                    fig, ax= plt.subplots(figsize=(30,10), dpi=150)

                    if  "☀️Total Solar Power" or "Total Net Renewable Power🌊☀️💨🌱🌋" in Filter: 
                        Solar_Total= df['data'][IndexList.index('Solar')]
                        
                        if  "☀️Total Solar Power" in Filter:    
                            ax.plot(timedf,(Solar_Total),  label= 'Total Solar Power', color= 'gold')
                            Stack_append.append(Solar_Total)
                            Stack_label.append("Solar")
                            Stack_colors.append('gold')
                            

                    if  "🌋Geothermal" or "Total Net Renewable Power🌊☀️💨🌱🌋" in Filter:
                        Geothermal_Total= df['data'][(IndexList.index('Geothermal'))]
                        
                        if  "🌋Geothermal" in Filter:
                            ax.plot(timedf,(Geothermal_Total),label= 'Geothermal', color= 'orange')
                            Stack_append.append(Geothermal_Total)
                            Stack_label.append("Geothermal")
                            Stack_colors.append('orange')

                    if "Nuclear" in Filter:
                        if "Nuclear" in IndexList:
                            Nuclear_Total=df['data'][(IndexList.index('Nuclear'))]
                            Stack_append.append(Nuclear_Total)
                            ax.plot(timedf,(Nuclear_Total), label= 'Nuclear Power', color='purple')
                            Stack_append.append(Nuclear_Total)
                            Stack_label.append("Nuclear")
                            Stack_colors.append('purple')

                        else:
                            col1.badge("Attention: Germany is Nuclear Power Free in Date Range Selected  \n No Data Points for Nuclear Power", color="red")

                    if "Others" in Filter:
                        Others_Total=df['data'][(IndexList.index('Others'))]
                        Stack_append.append(Others_Total)
                        ax.plot(timedf,(Others_Total),label= 'Others',color='black')
                        Stack_append.append(Others_Total)
                        Stack_label.append("Other")
                        Stack_colors.append('black')
                        

                    if "Cross border electricity trading" in Filter:   
                        Trading_Total=df['data'][IndexList.index('Cross border electricity trading')]
                        Stack_append.append(Trading_Total)
                        Stack_label.append("Cross border electricity trading")
                        Stack_colors.append('deeppink')
                        ax.plot(timedf,(Trading_Total), label= 'Cross border electricity trading', color='deeppink')

                    if  "🌊Total Net Hydro Power" or "Total Net Renewable Power🌊☀️💨🌱🌋" in Filter:
                        Hydro_Total=list(range(len(timedf)))
                        
                        for i in Hydro_Array:
                            for j in timedflen_range:
                                Hydro_Total[j]=df['data'][(IndexList.index(i))][j]+Hydro_Total[j]
                        if  "🌊Total Net Hydro Power" in Filter:
                            ax.plot(timedf,(Hydro_Total), label= 'Total Net Hydro Power', color='cornflowerblue')
                            Stack_append.append(Hydro_Total)
                            Stack_label.append("Hydro")
                            Stack_colors.append('cornflowerblue')

                    if  "💨Total Wind Power" or "Total Net Renewable Power🌊☀️💨🌱🌋" in Filter: 
                           
                        Wind_Total=list(range(len(timedf)))
                        
                        for i in Wind_Array:
                            for j in timedflen_range:
                                Wind_Total[j]=df['data'][IndexList.index(i)][j]+Wind_Total[j]
                        if  "💨Total Wind Power" in Filter:
                            ax.plot(timedf,(Wind_Total),label= 'Total Wind Power', color='turquoise' )
                            Stack_append.append(Wind_Total)
                            Stack_label.append("Wind")
                            Stack_colors.append('turquoise')
                    if  "🌱Total Biogenic" or "Total Net Renewable Power🌊☀️💨🌱🌋" in Filter:
                        Biogenic_Total=list(range(len(timedf)))
                        
                        for i in Biogenic_Array:
                                
                                for j in timedflen_range:
                                    
                                    Biogenic_Total[j]=df['data'][IndexList.index(i)][j]+Biogenic_Total[j]            
                        if  "🌱Total Biogenic" in Filter:
                            ax.plot(timedf,(Biogenic_Total),  label= 'Total Biogenic Power', color= 'darkgreen') 
                            Stack_append.append(Biogenic_Total)
                            Stack_label.append("Biogenic")
                            Stack_colors.append('darkgreen')
                            


                    if "Total Non-Renewable Net Power(Import/Export Excluded)" in Filter:
                        Non_Disc_Total=list(range(len(timedf)))
                        for i in Non_Renewable_Array_Disc:
                                for j in timedflen_range:
                                    Non_Disc_Total[j]=df['data'][IndexList.index(i)][j]+Non_Disc_Total[j]
                        ax.plot(timedf,(Non_Disc_Total),  label= 'Total Net Non-Renewable Power (Import/Export Excluded)', color='brown')
                        Stack_append.append(Non_Disc_Total)
                        Stack_label.append("Total Non-Renewable Net(Import/Export Excluded)")
                        Stack_colors.append('brown')
                        
                    
                    if "Total Non-Renewable Net Power" in Filter:
                        Non_Inc_Total=list(range(len(timedf)))
                        for i in Non_Renewable_Array_Inc_C:
                                for j in timedflen_range:
                                    try:
                                        Non_Inc_Total[j]=df['data'][IndexList.index(i)][j]+Non_Inc_Total[j]
                                    except ValueError:
                                        pass
                        ax.plot(timedf,(Non_Inc_Total),  label= 'Total Non-Renewable Net Power', color= 'red')
                        Stack_append.append(Non_Inc_Total)
                        Stack_label.append("Total Non-Renewable Net")
                        Stack_colors.append('red')
                    if "Total Net Renewable Power🌊☀️💨🌱🌋" in Filter: 

                        Ren_Total=list(range(len(timedf)))
                        for i in [Hydro_Total,Wind_Total,Biogenic_Total,Solar_Total,Geothermal_Total]: 
                                for j in timedflen_range:
                                    Ren_Total[j]=i[j]+Ren_Total[j]
                        ax.plot(timedf,(Ren_Total), label= 'Total Net Renewable Power', color='limegreen')
                        Stack_append.append(Ren_Total)
                        Stack_label.append("Total Net Renewable")
                        Stack_colors.append('limegreen')

                    if "Hydro pumped storage consumption" in Filter:
                        Hydro_Pumped_con=df['data'][(IndexList.index('Hydro pumped storage consumption'))]
                        ax.plot(timedf,(Hydro_Pumped_con), label= 'Hydro pumped storage consumption',color='chocolate')
                        Stack_append.append(Hydro_Pumped_con)
                        Stack_label.append("Hydro pumped storage consumption")
                        Stack_colors.append('chocolate')
                    if "Hydro Run-of-River" in Filter:
                        Hydro_Run=df['data'][(IndexList.index('Hydro Run-of-River'))]
                        ax.plot(timedf,(Hydro_Run),label= 'Hydro Run-of-River',color='cyan')
                        Stack_append.append(Hydro_Run)
                        Stack_label.append("Hydro Run-of-River")
                        Stack_colors.append('cyan')

                    if "Biomass" in Filter:
                        Biomass=df['data'][(IndexList.index('Biomass'))]
                        ax.plot(timedf,(Biomass),label= 'Biomass',color='darkolivegreen')
                        Stack_append.append(Biomass)
                        Stack_label.append("Biosmass")
                        Stack_colors.append('darkolivegreen')

                    if "Fossil brown coal / lignites" in Filter:
                        Fossil_brown=df['data'][(IndexList.index('Fossil brown coal / lignites'))]
                        ax.plot(timedf,(Fossil_brown), label= 'Fossil brown coal / lignite',color='gray')
                        Stack_append.append(Fossil_brown)
                        Stack_label.append("Fossil brown coal / lignites")
                        Stack_colors.append('gray')

                    if "Fossil hard coal" in Filter:
                        Fossil_hard=df['data'][(IndexList.index('Fossil hard coal'))]
                        ax.plot(timedf,(Fossil_hard), label= 'Fossil hard coal',color='orangered')
                        Stack_append.append(Fossil_hard)
                        Stack_label.append("Fossil hard coal")
                        Stack_colors.append('orangered')

                    if "Fossil oil" in Filter:
                        Fossil_oil=df['data'][(IndexList.index('Fossil oil'))]
                        ax.plot(timedf,(Fossil_oil), label= 'Fossil oil',color='crimson')
                        Stack_append.append(Fossil_oil)
                        Stack_label.append("Fossil oil")
                        Stack_colors.append('crimson')

                    if "Fossil coal-derived gas" in Filter:
                        Fossil_coal=df['data'][(IndexList.index('Fossil coal-derived gas'))]
                        ax.plot(timedf,(Fossil_coal), label= 'Fossil coal-derived gas',color='peru')
                        Stack_append.append(Fossil_coal)
                        Stack_label.append("Fossil coal-derived gas")
                        Stack_colors.append('peru')
                    if "Fossil gas" in Filter:
                        Fossil_gas=df['data'][(IndexList.index('Fossil gas'))]
                        ax.plot(timedf,(Fossil_gas), label= 'Fossil gas', color='blueviolet')
                        Stack_append.append(Fossil_gas)
                        Stack_label.append("Fossil gas")
                        Stack_colors.append('blueviolet')

                    if "Hydro water reservoir" in Filter:
                        Hydro_Res=df['data'][(IndexList.index('Hydro water reservoir'))]
                        ax.plot(timedf,(Hydro_Res),label= 'Hydro water reservoir', color='navy')
                        Stack_append.append(Hydro_Res)
                        Stack_label.append("Hydro water reservoir")
                        Stack_colors.append('navy')
                    if "Hydro pumped storage" in Filter:
                        Hydro_Pumped=df['data'][(IndexList.index('Hydro pumped storage'))]
                        ax.plot(timedf,(Hydro_Pumped), label= 'Hydro pumped storage', color='teal')
                        Stack_append.append(Hydro_Pumped)
                        Stack_label.append("Hydro Pumped Storage")
                        Stack_colors.append('teal')

                    if "Waste" in Filter: 
                        Waste=df['data'][(IndexList.index('Waste'))]
                        ax.plot(timedf,(Waste),label= 'Waste', color= 'darkred')
                        Stack_append.append(Waste)
                        Stack_label.append("Waste")
                        Stack_colors.append('darkred')

                    if "Wind offshore" in Filter:
                        Wind_off=df['data'][(IndexList.index('Wind offshore'))]
                        ax.plot(timedf,(Wind_off),label= 'Wind offshore')
                        Stack_append.append(Wind_off)
                        Stack_label.append("Wind offshore")


                    if "Wind onshore" in Filter:
                        Wind_on=df['data'][(IndexList.index('Wind onshore'))]
                        ax.plot(timedf,(Wind_on),label= 'Wind onshore', color= 'seagreen')
                        Stack_append.append(Wind_on)
                        Stack_label.append("Wind onshore")
                        Stack_colors.append('seagreen')


                    
                    Share_Gen=0
                    
                    for j in timedflen_range:
                            Share_Gen=df['data'][(IndexList.index('Renewable share of generation'))][j]+Share_Gen
                    Share_Gen_OT=Share_Gen/(timedflen) 
                    fig2, ax2=plt.subplots()
                    ax2.pie([Share_Gen_OT,(100-Share_Gen_OT) ],labels=['Renewable share of generation','Non-Renewable share of generation'],labeldistance=1.4,radius=0.8,autopct='%f',shadow=True,colors=["green", "orange"])
                    #ax2.set_title(f"Average Share of Generation")

                    Share_Gen_LastV= df['data'][(IndexList.index('Renewable share of generation'))][(len(df['data'][IndexList.index('Renewable share of generation')])-1)]
                    Share_Gen_firstV= df['data'][(IndexList.index('Renewable share of generation'))][0]
                    Share_Gen_Dif= Share_Gen_LastV-Share_Gen_firstV
                    if Share_Gen_Dif >=0:
                        Share_Gen_Dif_Str=f"+% Increase in Renewable Share of Generation Over Period"
                    if Share_Gen_Dif <0:
                        Share_Gen_Dif_Str=f"-% Decrease in Renewable Share of Generation Over Period"
                    if False:
                        ax.plot(df['time'][0],(df['data'][18]), linestyle= '--', marker= 'o',label= 'Load')
                
                        ax.plot(df['time'][0],(df['data'][19]), linestyle= '--', marker= 'o',label= 'Residual load')
                        ax.plot(df['time'][0],(df['data'][20]), linestyle= '--', marker= 'o',label= 'Renewable share of load')
                        ax.plot(df['time'][0],(df['data'][21]), linestyle= '--', marker= 'o',label= 'Renewable share of generation')   
                        #print(df)

                    #ax.set_title('Net Power over period')
                    ax.set_ylabel('Power')
                    ax.set_xlabel('Date Time')
                    ax.legend()
                    #plt.tight_layout()
                    sol1, sol2= st.columns(2,vertical_alignment='top',gap='medium')
                    sol1.title('Power Plot over Period')
                    sol1.pyplot(fig)
                    
                    
                    
                    
                    
                    fig3,ax3= plt.subplots(figsize=(30,10), dpi=150)
                    ax3.stackplot(df["time"][0],Stack_append,labels=Stack_label, colors=Stack_colors)
                    ax3.legend()
                    #ax3.set_title('Power Stackplot over period')
                    ax3.set_ylabel('Power')
                    ax3.set_xlabel('Date Time')
                    sol2.title('Power Stackplot over Period')
                    sol2.pyplot(fig3)
                    
                    yol1, yol2=st.columns(2,vertical_alignment='top',gap='small')
                    bol1, bol2,bol3= st.columns(3,vertical_alignment='center',gap='small')
                    fig4,ax4= plt.subplots(figsize=(30,10), dpi=150)

                    ax4.plot(timedf, df['data'][IndexList.index('Renewable share of generation')])
                    #ax4.set_title("Renewable share of generation over Period")
                    ax4.set_ylabel('% Renewable share of gen')
                    ax4.set_xlabel('Date')

                    
                    yol1.title(":green[Renewable] Share of Generation Plot over Period")
                    bol1.pyplot(fig4)
                    bol2.metric("", Share_Gen_Dif, delta= Share_Gen_Dif_Str)
                    yol2.title("Pie Chart Avg. :green[Renewable] Share of Generation")
                    bol3.pyplot(fig2)
                    
                    
                else:
                    col1.badge("Choose Filter to load dashboard", color="blue")
        except requests.exceptions.ConnectionError:
            ccol=col2.columns(2,gap='small')
            col1.badge("Check Internet Connection!", color="red")
    except (ValueError):
        ccol=col2.columns(2,gap='small')
        ccol[1].badge("Enter Date Range", color="orange")  
    
    #print(df)

    #todayurl= (requests.get(f"https://api.energy-charts.info/public_power?country=de&start={today}")).json()
    #normalizedtodayurl= pd.json_normalize(todayurl, record_path='production_types', meta='unix_seconds')
    #df2= pd.DataFrame(normalizedtodayurl)
    
    #plt.title("Share of generation: Renewable & Non-Renewable")
    #({'Share of Generation':['Renewable share of generation','Non-Renewable share of generation'],
    #                "Percentage" :[liveshare,(100-liveshare) ]}, title="Share of generation: Renewable & Non-Renewable")
    
    

def page_Live():
    ...


def page_Price():
    ...




    
def page_About():

    col1,col2, col3= st.columns(3, vertical_alignment="center")
    
    col1.image('/home/muneer/Desktop/PY4E/208080282/project/DSC06149_03222.jpg', width=350, caption='_Muneer Alsughayer_')
    col2.title('About me')
    with col2.container(height=600):
        st.text(' An Industrial Engineer based in Kuwait with experience in Jordan, Kuwait and Germany. Graduated from the German Jordanian University, spent an exchange year at Osnabrück University of Applied Sciences, and interned at Voith Hydro in Baden-Württemberg—benchmarking PRM tools and building Excel VBA dashboards to streamline B2B processes.'
                    '\n  \n  Currently, I serve as Project Manager Assistant at Abdul‑Hameed Salem Sons in Kuwait, optimizing inventory and workflows. Alongside this role, I’m building hands‑on projects to master Power BI, SQL, MS Excel and Python libraries (pandas, NumPy, matplotlib, Plotly), —applying data‑driven techniques to simulate process improvements, visualize insights and automate workflows. My goal is to make every operation smarter, more efficient and truly data‑driven.')
        but1,but2,but3,but4= st.columns(4)
        but1.link_button(':blue[LinkedIn]','https://www.linkedin.com/in/muneeras/') 
        but2.link_button('Email','Muneer.as@outlook.com')
    
    col3.title(':green[Green Grid]')
    with col3.container(height=292):
        st.markdown(":grey[_Data Source  \nEnergy-Charts API by  \nFraunhofer Institute for Solar Energy Systems ISE, Germany  \n_Prof. Dr. Bruno Burger_  \n https://api.energy-charts.info  \nChanges made to Public Power data include  downsampling/decimation by 4 for optimized processing  \nLicense:_ [CC by 4.0](https://creativecommons.org/licenses/by/4.0/)]")

    with col3.container(height=292):
        st.markdown(":grey[_Graphs generated by Green Grid are licensed under_ [CC by 4.0](https://creativecommons.org/licenses/by/4.0/).  \n  _Proper attribution to GreenGrid.com is required:  \n Title: Green Grid by Muneer (2025)  \n Author Name: Muneer Alsughayer  \n Source Link:Greengrid.com  \n License:_ [CC by 4.0](https://creativecommons.org/licenses/by/4.0/)]")

    

if __name__ == "__main__":
    main()